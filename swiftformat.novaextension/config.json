[{
    "key": "computer.gareth.swiftformat.path",
    "title": "Path to swiftformat",
    "type": "path",
    "default": "/usr/local/bin/swiftformat"
},
{
    "title": "andOperator",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.andOperator",
        "title": "Prefer comma over `&&` in `if`, `guard` or `while` conditions.",
        "type": "boolean"
    }]
},
{
    "title": "anyObjectProtocol",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.anyObjectProtocol",
        "title": "Prefer `AnyObject` over `class` in protocol definitions.",
        "type": "boolean"
    }]
},
{
    "title": "blankLinesAroundMark",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.blankLinesAroundMark",
        "title": "Insert blank line before and after `MARK:` comments.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "blankLinesAtEndOfScope",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.blankLinesAtEndOfScope",
        "title": "Remove trailing blank line at the end of a scope.",
        "type": "boolean"
    }]
},
{
    "title": "blankLinesAtStartOfScope",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.blankLinesAtStartOfScope",
        "title": "Remove leading blank line at the start of a scope.",
        "type": "boolean"
    }]
},
{
    "title": "blankLinesBetweenScopes",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.blankLinesBetweenScopes",
        "title": "Insert blank line before class, struct, enum, extension, protocol or function\ndeclarations.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "braces",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.braces",
        "title": "Wrap braces in accordance with selected style (K&R or Allman).",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.allman",
        "title": "allman",
        "description": "Use allman indentation style: \"true\" or \"false\" (default)",
        "type": "enum",
        "values": [
            "true",
            "false"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.maxwidth",
        "title": "maxwidth",
        "description": "Maximum length of a line before wrapping. defaults to \"none\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.indent",
        "title": "indent",
        "description": "Number of spaces to indent, or \"tab\" to use tabs",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.tabwidth",
        "title": "tabwidth",
        "description": "The width of a tab character. Defaults to \"unspecified\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.assetliterals",
        "title": "assetliterals",
        "description": "Color/image literal width. \"actual-width\" or \"visual-width\"",
        "type": "string"
    }]
},
{
    "title": "consecutiveBlankLines",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.consecutiveBlankLines",
        "title": "Replace consecutive blank lines with a single blank line.",
        "type": "boolean"
    }]
},
{
    "title": "consecutiveSpaces",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.consecutiveSpaces",
        "title": "Replace consecutive spaces with a single space.",
        "type": "boolean"
    }]
},
{
    "title": "duplicateImports",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.duplicateImports",
        "title": "Remove duplicate import statements.",
        "type": "boolean"
    }]
},
{
    "title": "elseOnSameLine",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.elseOnSameLine",
        "title": "Place `else`, `catch` or `while` keyword in accordance with current style (same or\nnext line).",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.elseposition",
        "title": "elseposition",
        "description": "Placement of else/catch: \"same-line\" (default) or \"next-line\"",
        "type": "enum",
        "values": [
            "next-line",
            "same-line"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.guardelse",
        "title": "guardelse",
        "description": "Guard else: \"same-line\", \"next-line\" or \"auto\" (default)",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.allman",
        "title": "allman",
        "description": "Use allman indentation style: \"true\" or \"false\" (default)",
        "type": "enum",
        "values": [
            "true",
            "false"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "emptyBraces",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.emptyBraces",
        "title": "Remove whitespace inside empty braces.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.emptybraces",
        "title": "emptybraces",
        "description": "Empty braces: \"no-space\" (default), \"spaced\" or \"linebreak\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "enumNamespaces",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.enumNamespaces",
        "title": "Converts types used for hosting only static members into enums (an empty enum is\nthe canonical way to create a namespace in Swift as it can't be instantiated).",
        "type": "boolean"
    }]
},
{
    "title": "extensionAccessControl",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.extensionAccessControl",
        "title": "Configure the placement of an extension's access control keyword.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.extensionacl",
        "title": "extensionacl",
        "description": "Place ACL \"on-extension\" (default) or \"on-declarations\"",
        "type": "string"
    }]
},
{
    "title": "fileHeader",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.fileHeader",
        "title": "Use specified source file header template for all files.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.header",
        "title": "header",
        "description": "Header comments: \"strip\", \"ignore\", or the text you wish use",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "hoistPatternLet",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.hoistPatternLet",
        "title": "Reposition `let` or `var` bindings within pattern.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.patternlet",
        "title": "patternlet",
        "description": "let/var placement in patterns: \"hoist\" (default) or \"inline\"",
        "type": "enum",
        "values": [
            "hoist",
            "inline"
        ]
    }]
},
{
    "title": "indent",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.indent",
        "title": "Indent code in accordance with the scope level.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.indent",
        "title": "indent",
        "description": "Number of spaces to indent, or \"tab\" to use tabs",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.tabwidth",
        "title": "tabwidth",
        "description": "The width of a tab character. Defaults to \"unspecified\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.smarttabs",
        "title": "smarttabs",
        "description": "Align code independently of tab width. defaults to \"enabled\"",
        "type": "enum",
        "values": [
            "enabled",
            "disabled"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.indentcase",
        "title": "indentcase",
        "description": "Indent cases inside a switch: \"true\" or \"false\" (default)",
        "type": "enum",
        "values": [
            "true",
            "false"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.ifdef",
        "title": "ifdef",
        "description": "#if indenting: \"indent\" (default), \"no-indent\" or \"outdent\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.xcodeindentation",
        "title": "xcodeindentation",
        "description": "Match Xcode indenting: \"enabled\" or \"disabled\" (default)",
        "type": "enum",
        "values": [
            "enabled",
            "disabled"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.trimwhitespace",
        "title": "trimwhitespace",
        "description": "Trim trailing space: \"always\" (default) or \"nonblank-lines\"",
        "type": "enum",
        "values": [
            "always",
            "nonblank-lines"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.allman",
        "title": "allman",
        "description": "Use allman indentation style: \"true\" or \"false\" (default)",
        "type": "enum",
        "values": [
            "true",
            "false"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.wrapconditions",
        "title": "wrapconditions",
        "description": "Wrap conditions: \"before-first\", \"after-first\", \"preserve\"",
        "type": "string"
    }]
},
{
    "title": "initCoderUnavailable",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.initCoderUnavailable",
        "title": "Add `@available(*, unavailable)` attribute to required `init(coder:)` when\nit hasn't been implemented.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "isEmpty",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.isEmpty",
        "title": "Prefer `isEmpty` over comparing `count` against zero.",
        "type": "boolean"
    }]
},
{
    "title": "leadingDelimiters",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.leadingDelimiters",
        "title": "Move leading delimiters to the end of the previous line.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "linebreakAtEndOfFile",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.linebreakAtEndOfFile",
        "title": "Add empty blank line at end of file.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "linebreaks",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.linebreaks",
        "title": "Use specified linebreak character for all linebreaks (CR, LF or CRLF).",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "markTypes",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.markTypes",
        "title": "Adds a mark comment before top-level types and extensions.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.marktypes",
        "title": "marktypes",
        "description": "Mark types \"always\" (default), \"never\", \"if-not-empty\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.typemark",
        "title": "typemark",
        "description": "Template for type mark comments. Defaults to \"MARK: - %t\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.markextensions",
        "title": "markextensions",
        "description": "Mark extensions \"always\" (default), \"never\", \"if-not-empty\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.extensionmark",
        "title": "extensionmark",
        "description": "Mark for standalone extensions. Defaults to \"MARK: - %t + %c\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.groupedextension",
        "title": "groupedextension",
        "description": "Mark for extension grouped with extended type. (\"MARK: %c\")",
        "type": "string"
    }]
},
{
    "title": "modifierOrder",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.modifierOrder",
        "title": "Use consistent ordering for member modifiers.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.modifierorder",
        "title": "modifierorder",
        "description": "Comma-delimited list of modifiers in preferred order",
        "type": "stringArray"
    }]
},
{
    "title": "numberFormatting",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.numberFormatting",
        "title": "Use consistent grouping for numeric literals. Groups will be separated by `_`\ndelimiters to improve readability. For each numeric type you can specify a group\nsize (the number of digits in each group) and a threshold (the minimum number of\ndigits in a number before grouping is applied).",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.decimalgrouping",
        "title": "decimalgrouping",
        "description": "Decimal grouping,threshold (default: 3,6) or \"none\", \"ignore\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.binarygrouping",
        "title": "binarygrouping",
        "description": "Binary grouping,threshold (default: 4,8) or \"none\", \"ignore\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.octalgrouping",
        "title": "octalgrouping",
        "description": "Octal grouping,threshold (default: 4,8) or \"none\", \"ignore\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.hexgrouping",
        "title": "hexgrouping",
        "description": "Hex grouping,threshold (default: 4,8) or \"none\", \"ignore\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.fractiongrouping",
        "title": "fractiongrouping",
        "description": "Group digits after '.': \"enabled\" or \"disabled\" (default)",
        "type": "enum",
        "values": [
            "enabled",
            "disabled"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.exponentgrouping",
        "title": "exponentgrouping",
        "description": "Group exponent digits: \"enabled\" or \"disabled\" (default)",
        "type": "enum",
        "values": [
            "enabled",
            "disabled"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.hexliteralcase",
        "title": "hexliteralcase",
        "description": "Casing for hex literals: \"uppercase\" (default) or \"lowercase\"",
        "type": "enum",
        "values": [
            "uppercase",
            "lowercase"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.exponentcase",
        "title": "exponentcase",
        "description": "Case of 'e' in numbers: \"lowercase\" or \"uppercase\" (default)",
        "type": "enum",
        "values": [
            "uppercase",
            "lowercase"
        ]
    }]
},
{
    "title": "organizeDeclarations",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.organizeDeclarations",
        "title": "Organizes declarations within class, struct, and enum bodies.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.categorymark",
        "title": "categorymark",
        "description": "Template for category mark comments. Defaults to \"MARK: %c\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.beforemarks",
        "title": "beforemarks",
        "description": "Declarations placed before first mark (e.g. `typealias,struct`)",
        "type": "stringArray"
    },
    {
        "key": "computer.gareth.swiftformat.option.lifecycle",
        "title": "lifecycle",
        "description": "Names of additional Lifecycle methods (e.g. `viewDidLoad`)",
        "type": "stringArray"
    },
    {
        "key": "computer.gareth.swiftformat.option.organizetypes",
        "title": "organizetypes",
        "description": "Declarations to organize (default: `class,actor,struct,enum`)",
        "type": "stringArray"
    },
    {
        "key": "computer.gareth.swiftformat.option.structthreshold",
        "title": "structthreshold",
        "description": "Minimum line count to organize struct body. Defaults to 0",
        "type": "number"
    },
    {
        "key": "computer.gareth.swiftformat.option.classthreshold",
        "title": "classthreshold",
        "description": "Minimum line count to organize class body. Defaults to 0",
        "type": "number"
    },
    {
        "key": "computer.gareth.swiftformat.option.enumthreshold",
        "title": "enumthreshold",
        "description": "Minimum line count to organize enum body. Defaults to 0",
        "type": "number"
    },
    {
        "key": "computer.gareth.swiftformat.option.extensionlength",
        "title": "extensionlength",
        "description": "Minimum line count to organize extension body. Defaults to 0",
        "type": "number"
    }]
},
{
    "title": "preferKeyPath",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.preferKeyPath",
        "title": "Convert trivial `map { $0.foo }` closures to keyPath-based syntax.",
        "type": "boolean"
    }]
},
{
    "title": "redundantBackticks",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantBackticks",
        "title": "Remove redundant backticks around identifiers.",
        "type": "boolean"
    }]
},
{
    "title": "redundantBreak",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantBreak",
        "title": "Remove redundant `break` in switch case.",
        "type": "boolean"
    }]
},
{
    "title": "redundantExtensionACL",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantExtensionACL",
        "title": "Remove redundant access control modifiers.",
        "type": "boolean"
    }]
},
{
    "title": "redundantFileprivate",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantFileprivate",
        "title": "Prefer `private` over `fileprivate` where equivalent.",
        "type": "boolean"
    }]
},
{
    "title": "redundantGet",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantGet",
        "title": "Remove unneeded `get` clause inside computed properties.",
        "type": "boolean"
    }]
},
{
    "title": "redundantInit",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantInit",
        "title": "Remove explicit `init` if not required.",
        "type": "boolean"
    }]
},
{
    "title": "redundantLet",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantLet",
        "title": "Remove redundant `let`/`var` from ignored variables.",
        "type": "boolean"
    }]
},
{
    "title": "redundantLetError",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantLetError",
        "title": "Remove redundant `let error` from `catch` clause.",
        "type": "boolean"
    }]
},
{
    "title": "redundantNilInit",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantNilInit",
        "title": "Remove redundant `nil` default value (Optional vars are nil by default).",
        "type": "boolean"
    }]
},
{
    "title": "redundantObjc",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantObjc",
        "title": "Remove redundant `@objc` annotations.",
        "type": "boolean"
    }]
},
{
    "title": "redundantParens",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantParens",
        "title": "Remove redundant parentheses.",
        "type": "boolean"
    }]
},
{
    "title": "redundantPattern",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantPattern",
        "title": "Remove redundant pattern matching parameter syntax.",
        "type": "boolean"
    }]
},
{
    "title": "redundantRawValues",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantRawValues",
        "title": "Remove redundant raw string values for enum cases.",
        "type": "boolean"
    }]
},
{
    "title": "redundantReturn",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantReturn",
        "title": "Remove unneeded `return` keyword.",
        "type": "boolean"
    }]
},
{
    "title": "redundantSelf",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantSelf",
        "title": "Insert/remove explicit `self` where applicable.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.self",
        "title": "self",
        "description": "Explicit self: \"insert\", \"remove\" (default) or \"init-only\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.selfrequired",
        "title": "selfrequired",
        "description": "Comma-delimited list of functions with @autoclosure arguments",
        "type": "stringArray"
    }]
},
{
    "title": "redundantType",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantType",
        "title": "Remove redundant type from variable declarations.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.redundanttype",
        "title": "redundanttype",
        "description": "Keep \"inferred\" (default) or \"explicit\" type annotation",
        "type": "string"
    }]
},
{
    "title": "redundantVoidReturnType",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.redundantVoidReturnType",
        "title": "Remove explicit `Void` return type.",
        "type": "boolean"
    }]
},
{
    "title": "semicolons",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.semicolons",
        "title": "Remove semicolons.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.semicolons",
        "title": "semicolons",
        "description": "Allow semicolons: \"never\" or \"inline\" (default)",
        "type": "enum",
        "values": [
            "inline",
            "never"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "sortedImports",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.sortedImports",
        "title": "Sort import statements alphabetically.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.importgrouping",
        "title": "importgrouping",
        "description": "\"testable-first/last\", \"alpha\" (default) or \"length\"",
        "type": "enum",
        "values": [
            "alpha",
            "length",
            "testable-first",
            "testable-last"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "sortedSwitchCases",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.sortedSwitchCases",
        "title": "Sorts switch cases alphabetically.",
        "type": "boolean"
    }]
},
{
    "title": "spaceAroundBraces",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceAroundBraces",
        "title": "Add or remove space around curly braces.",
        "type": "boolean"
    }]
},
{
    "title": "spaceAroundBrackets",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceAroundBrackets",
        "title": "Add or remove space around square brackets.",
        "type": "boolean"
    }]
},
{
    "title": "spaceAroundComments",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceAroundComments",
        "title": "Add space before and/or after comments.",
        "type": "boolean"
    }]
},
{
    "title": "spaceAroundGenerics",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceAroundGenerics",
        "title": "Remove space around angle brackets.",
        "type": "boolean"
    }]
},
{
    "title": "spaceAroundOperators",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceAroundOperators",
        "title": "Add or remove space around operators or delimiters.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.operatorfunc",
        "title": "operatorfunc",
        "description": "Spacing for operator funcs: \"spaced\" (default) or \"no-space\"",
        "type": "enum",
        "values": [
            "spaced",
            "no-space"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.nospaceoperators",
        "title": "nospaceoperators",
        "description": "Comma-delimited list of operators without surrounding space",
        "type": "stringArray"
    },
    {
        "key": "computer.gareth.swiftformat.option.ranges",
        "title": "ranges",
        "description": "Spacing for ranges: \"spaced\" (default) or \"no-space\"",
        "type": "enum",
        "values": [
            "spaced",
            "no-space"
        ]
    }]
},
{
    "title": "spaceAroundParens",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceAroundParens",
        "title": "Add or remove space around parentheses.",
        "type": "boolean"
    }]
},
{
    "title": "spaceInsideBraces",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceInsideBraces",
        "title": "Add space inside curly braces.",
        "type": "boolean"
    }]
},
{
    "title": "spaceInsideBrackets",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceInsideBrackets",
        "title": "Remove space inside square brackets.",
        "type": "boolean"
    }]
},
{
    "title": "spaceInsideComments",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceInsideComments",
        "title": "Add leading and/or trailing space inside comments.",
        "type": "boolean"
    }]
},
{
    "title": "spaceInsideGenerics",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceInsideGenerics",
        "title": "Remove space inside angle brackets.",
        "type": "boolean"
    }]
},
{
    "title": "spaceInsideParens",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.spaceInsideParens",
        "title": "Remove space inside parentheses.",
        "type": "boolean"
    }]
},
{
    "title": "strongOutlets",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.strongOutlets",
        "title": "Remove `weak` modifier from `@IBOutlet` properties.",
        "type": "boolean"
    }]
},
{
    "title": "strongifiedSelf",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.strongifiedSelf",
        "title": "Remove backticks around `self` in Optional unwrap expressions.",
        "type": "boolean"
    }]
},
{
    "title": "todos",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.todos",
        "title": "Use correct formatting for `TODO:`, `MARK:` or `FIXME:` comments.",
        "type": "boolean"
    }]
},
{
    "title": "trailingClosures",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.trailingClosures",
        "title": "Use trailing closure syntax where applicable.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.trailingclosures",
        "title": "trailingclosures",
        "description": "Comma-delimited list of functions that use trailing closures",
        "type": "stringArray"
    },
    {
        "key": "computer.gareth.swiftformat.option.nevertrailing",
        "title": "nevertrailing",
        "description": "List of functions that should never use trailing closures",
        "type": "stringArray"
    }]
},
{
    "title": "trailingCommas",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.trailingCommas",
        "title": "Add or remove trailing comma from the last item in a collection literal.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.commas",
        "title": "commas",
        "description": "Commas in collection literals: \"always\" (default) or \"inline\"",
        "type": "enum",
        "values": [
            "always",
            "inline"
        ]
    }]
},
{
    "title": "trailingSpace",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.trailingSpace",
        "title": "Remove trailing space at end of a line.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.trimwhitespace",
        "title": "trimwhitespace",
        "description": "Trim trailing space: \"always\" (default) or \"nonblank-lines\"",
        "type": "enum",
        "values": [
            "always",
            "nonblank-lines"
        ]
    }]
},
{
    "title": "typeSugar",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.typeSugar",
        "title": "Prefer shorthand syntax for Arrays, Dictionaries and Optionals.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.shortoptionals",
        "title": "shortoptionals",
        "description": "Use ? for Optionals \"always\" (default) or \"except-properties\"",
        "type": "string"
    }]
},
{
    "title": "unusedArguments",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.unusedArguments",
        "title": "Mark unused function arguments with `_`.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.stripunusedargs",
        "title": "stripunusedargs",
        "description": "\"closure-only\", \"unnamed-only\" or \"always\" (default)",
        "type": "string"
    }]
},
{
    "title": "void",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.void",
        "title": "Use `Void` for type declarations and `()` for values.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.voidtype",
        "title": "voidtype",
        "description": "How Void types are represented: \"void\" (default) or \"tuple\"",
        "type": "enum",
        "values": [
            "void",
            "tuple"
        ]
    }]
},
{
    "title": "wrap",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.wrap",
        "title": "Wrap lines that exceed the specified maximum width.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.maxwidth",
        "title": "maxwidth",
        "description": "Maximum length of a line before wrapping. defaults to \"none\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.nowrapoperators",
        "title": "nowrapoperators",
        "description": "Comma-delimited list of operators that shouldn't be wrapped",
        "type": "stringArray"
    },
    {
        "key": "computer.gareth.swiftformat.option.assetliterals",
        "title": "assetliterals",
        "description": "Color/image literal width. \"actual-width\" or \"visual-width\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.wraparguments",
        "title": "wraparguments",
        "description": "Wrap all arguments: \"before-first\", \"after-first\", \"preserve\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.wrapparameters",
        "title": "wrapparameters",
        "description": "Wrap func params: \"before-first\", \"after-first\", \"preserve\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.wrapcollections",
        "title": "wrapcollections",
        "description": "Wrap array/dict: \"before-first\", \"after-first\", \"preserve\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.closingparen",
        "title": "closingparen",
        "description": "Closing paren position: \"balanced\" (default) or \"same-line\"",
        "type": "enum",
        "values": [
            "same-line",
            "balanced"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.indent",
        "title": "indent",
        "description": "Number of spaces to indent, or \"tab\" to use tabs",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.trimwhitespace",
        "title": "trimwhitespace",
        "description": "Trim trailing space: \"always\" (default) or \"nonblank-lines\"",
        "type": "enum",
        "values": [
            "always",
            "nonblank-lines"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.tabwidth",
        "title": "tabwidth",
        "description": "The width of a tab character. Defaults to \"unspecified\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.maxwidth",
        "title": "maxwidth",
        "description": "Maximum length of a line before wrapping. defaults to \"none\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.smarttabs",
        "title": "smarttabs",
        "description": "Align code independently of tab width. defaults to \"enabled\"",
        "type": "enum",
        "values": [
            "enabled",
            "disabled"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.wrapreturntype",
        "title": "wrapreturntype",
        "description": "Wrap return type: \"if-multiline\", \"preserve\" (default)",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.wrapconditions",
        "title": "wrapconditions",
        "description": "Wrap conditions: \"before-first\", \"after-first\", \"preserve\"",
        "type": "string"
    }]
},
{
    "title": "wrapArguments",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.wrapArguments",
        "title": "Align wrapped function arguments or collection elements.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.wraparguments",
        "title": "wraparguments",
        "description": "Wrap all arguments: \"before-first\", \"after-first\", \"preserve\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.wrapparameters",
        "title": "wrapparameters",
        "description": "Wrap func params: \"before-first\", \"after-first\", \"preserve\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.wrapcollections",
        "title": "wrapcollections",
        "description": "Wrap array/dict: \"before-first\", \"after-first\", \"preserve\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.closingparen",
        "title": "closingparen",
        "description": "Closing paren position: \"balanced\" (default) or \"same-line\"",
        "type": "enum",
        "values": [
            "same-line",
            "balanced"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.wrapreturntype",
        "title": "wrapreturntype",
        "description": "Wrap return type: \"if-multiline\", \"preserve\" (default)",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.wrapconditions",
        "title": "wrapconditions",
        "description": "Wrap conditions: \"before-first\", \"after-first\", \"preserve\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.indent",
        "title": "indent",
        "description": "Number of spaces to indent, or \"tab\" to use tabs",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.trimwhitespace",
        "title": "trimwhitespace",
        "description": "Trim trailing space: \"always\" (default) or \"nonblank-lines\"",
        "type": "enum",
        "values": [
            "always",
            "nonblank-lines"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.tabwidth",
        "title": "tabwidth",
        "description": "The width of a tab character. Defaults to \"unspecified\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.maxwidth",
        "title": "maxwidth",
        "description": "Maximum length of a line before wrapping. defaults to \"none\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.smarttabs",
        "title": "smarttabs",
        "description": "Align code independently of tab width. defaults to \"enabled\"",
        "type": "enum",
        "values": [
            "enabled",
            "disabled"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.assetliterals",
        "title": "assetliterals",
        "description": "Color/image literal width. \"actual-width\" or \"visual-width\"",
        "type": "string"
    }]
},
{
    "title": "wrapAttributes",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.wrapAttributes",
        "title": "Wrap @attributes onto a separate line, or keep them on the same line.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.funcattributes",
        "title": "funcattributes",
        "description": "Function @attributes: \"preserve\", \"prev-line\", or \"same-line\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.typeattributes",
        "title": "typeattributes",
        "description": "Type @attributes: \"preserve\", \"prev-line\", or \"same-line\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.varattributes",
        "title": "varattributes",
        "description": "Property @attributes: \"preserve\", \"prev-line\", or \"same-line\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "wrapEnumCases",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.wrapEnumCases",
        "title": "Writes one enum case per line.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "wrapMultilineStatementBraces",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.wrapMultilineStatementBraces",
        "title": "Wrap the opening brace of multiline statements.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    }]
},
{
    "title": "wrapSwitchCases",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.wrapSwitchCases",
        "title": "Writes one switch case per line.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.linebreaks",
        "title": "linebreaks",
        "description": "Linebreak character to use: \"cr\", \"crlf\" or \"lf\" (default)",
        "type": "enum",
        "values": [
            "cr",
            "crlf",
            "lf"
        ]
    },
    {
        "key": "computer.gareth.swiftformat.option.tabwidth",
        "title": "tabwidth",
        "description": "The width of a tab character. Defaults to \"unspecified\"",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.indent",
        "title": "indent",
        "description": "Number of spaces to indent, or \"tab\" to use tabs",
        "type": "string"
    },
    {
        "key": "computer.gareth.swiftformat.option.smarttabs",
        "title": "smarttabs",
        "description": "Align code independently of tab width. defaults to \"enabled\"",
        "type": "enum",
        "values": [
            "enabled",
            "disabled"
        ]
    }]
},
{
    "title": "yodaConditions",
    "type": "section",
    "children": [
    {
        "key": "computer.gareth.swiftformat.rule.yodaConditions",
        "title": "Prefer constant values to be on the right-hand-side of expressions.",
        "type": "boolean"
    },
    {
        "key": "computer.gareth.swiftformat.option.yodaswap",
        "title": "yodaswap",
        "description": "Swap yoda values: \"always\" (default) or \"literals-only\"",
        "type": "string"
    }]
}]
